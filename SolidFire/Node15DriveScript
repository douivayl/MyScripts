# Force PowerShell to Use TLS 1.2
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
# Bypass SSL Certificate Validation (For Testing Only)
[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }

# Parameters
$DriveRanges = @(193..199, 200, 201)  # Define drive ranges and individual drives
$DelaySeconds = 8600  # Delay between drive additions (2.3 hours)

# Define the API endpoint and credentials
$SolidFireAPI = "https://10.208.94.40/json-rpc/10.0"
$User = "admin"
$Password = "milcalVDC!"

# Function to add a drive to the cluster
function Add-DriveToCluster {
    param (
        [int]$DriveID
    )

    # Prepare the request payload
    $Payload = @(
        @{
            method = "AddDrives"
            params = @{
                drives = @($DriveID)  # Always send as an array
            }
            id = 1
        }
    ) | ConvertTo-Json -Depth 10

    # Debug: Output the payload
    Write-Host "Payload: $($Payload | ConvertTo-Json -Depth 10)" -ForegroundColor Cyan

    # Make the API request
    try {
        Write-Host "Adding drive ID $DriveID to the cluster..." -ForegroundColor Yellow
        $Response = Invoke-RestMethod -Uri $SolidFireAPI -Method Post -Body $Payload -ContentType "application/json" -Credential (New-Object System.Management.Automation.PSCredential($User, (ConvertTo-SecureString $Password -AsPlainText -Force)))

        # Handle the response
        if ($Response.result) {
            Write-Host "Drive ID $DriveID added successfully." -ForegroundColor Green
        } else {
            Write-Host "Drive ID $DriveID addition completed, but no result returned." -ForegroundColor Red
        }
    } catch {
        Write-Host "An error occurred while adding drive ID $DriveID: $_" -ForegroundColor Red
    }
}

# Iterate through drives and add them to the cluster with a delay
foreach ($DriveID in $DriveRanges) {
    Add-DriveToCluster -DriveID $DriveID

    # Delay between each drive addition (except after the last one)
    if ($DriveID -ne $DriveRanges[-1]) {
        Write-Host "Waiting for $DelaySeconds seconds before adding the next drive..." -ForegroundColor Yellow
        Start-Sleep -Seconds $DelaySeconds
    }
}

Write-Host "All drives have been processed." -ForegroundColor Green